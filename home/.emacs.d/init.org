#+TITLE: Emacs configuration
#+AUTHOR: Stefanos Carlstr√∂m
#+EMAIL: stefanos.carlstrom@gmail.com

#+PROPERTY: tangle yes
#+PROPERTY: comments org
* Introduction
** References
   - [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua's config]]
   - [[https://github.com/grettke/home][Grant Rettke's config]]
   - [[https://github.com/larstvei/dot-emacs][Lars Tveito's config]]

* Misc
  [[http://www.emacswiki.org/emacs/CommonLispForEmacs][Common Lisp macros for Emacs lisp]].
  #+BEGIN_SRC emacs-lisp
    (require 'cl-lib)
  #+END_SRC
** Startup
   #+BEGIN_SRC emacs-lisp
     (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
     (load custom-file)
   #+END_SRC

** Packages
   [[https://github.com/cask/cask][Cask]] is used for external dependencies (see [[file:Cask][./Cask]]), [[https://github.com/jwiegley/use-package][use-package]]
   for lazy-loading of packages.
   #+BEGIN_SRC emacs-lisp
     (require 'cask "~/.cask/cask.el")
     (cask-initialize)
     (require 'use-package)
     (use-package pallet)
   #+END_SRC
** Org tangle configuration
   Borrowed from [[https://github.com/larstvei/dot-emacs][Lars Tveito]].
   #+BEGIN_SRC emacs-lisp
     (use-package org)
     (use-package ob-tangle
       :init
       (progn
         (defun tangle-init ()
           "If the current buffer is 'init.org' the code-blocks are
          tangled, and the tangled file is compiled."
           (let ((init-file (concat user-emacs-directory "init.org")))
             (when (member (buffer-file-name) (list (file-truename init-file)
                                                    (expand-file-name init-file)))
               (org-babel-tangle)
               (byte-compile-file (concat user-emacs-directory "init.el")))))
         (add-hook 'after-save-hook 'tangle-init)))
   #+END_SRC
** Encoding
   #+BEGIN_SRC emacs-lisp
     (setq locale-coding-system 'utf-8)
     (set-terminal-coding-system 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (set-selection-coding-system 'utf-8)
     (prefer-coding-system 'utf-8)
   #+END_SRC
** Text editing
   [[https://github.com/Fuco1/smartparens][smartparens]]
   #+BEGIN_SRC emacs-lisp
     (add-hook 'text-mode-hook 'turn-on-auto-fill)
     (add-hook 'text-mode-hook 'flyspell-mode)
     (use-package rainbow-delimiters
       :init (global-rainbow-delimiters-mode))
     (show-paren-mode 't)

     (use-package smartparens
       :init
       (progn
         (smartparens-global-mode)
         (sp-local-pair 'hy-mode "'" nil :actions nil)))
     (use-package smartparens-config)
   #+END_SRC
** Spelling
   #+BEGIN_SRC emacs-lisp
     (setq-default ispell-program-name "aspell")
     (setq-default ispell-dictionary "en_GB-ize")
   #+END_SRC
** Ack
   #+BEGIN_SRC emacs-lisp
     (require 'ack-and-a-half)
     ;; Create shorter aliases
     (defalias 'ack 'ack-and-a-half)
     (defalias 'ack-same 'ack-and-a-half-same)
     (defalias 'ack-find-file 'ack-and-a-half-find-file)
     (defalias 'ack-find-file-same 'ack-and-a-half-find-file-same)
   #+END_SRC
** Ag
   #+BEGIN_SRC emacs-lisp
     (use-package ag)
     (setq ag-highlight-search t)
   #+END_SRC
** Yasnippet
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :init
       (yas-global-mode 1))
   #+END_SRC

** Terminal
   Borrowed from [[http://www.emacswiki.org/emacs-ja/AnsiTermHints][Emacs wiki]].
   #+BEGIN_SRC emacs-lisp
     ;; Use this for remote so I can specify command line arguments
     (defun remote-term (new-buffer-name cmd &rest switches)
       (let ((term-ansi-buffer-name
              (apply 'make-term
                     (generate-new-buffer-name
                      (concat "*" new-buffer-name "*"))
                     cmd nil switches)))
       (set-buffer term-ansi-buffer-name)
       (term-mode)
       (term-char-mode)
       ;;(term-set-escape-char ?\C-x)
       (switch-to-buffer term-ansi-buffer-name)))


     ;; Kills buffer when terminal quits
     (defadvice term-sentinel (around my-advice-term-sentinel (proc
                                                               msg))
       (if (memq (process-status proc) '(signal exit))
           (let ((buffer (process-buffer proc)) )
             ad-do-it
             (kill-buffer buffer))
         ad-do-it))
     (ad-activate 'term-sentinel)

     (global-set-key (kbd "<f1>") (lambda ()
                                    (interactive)
                                    (ansi-term "zsh" "localhost")))
     (global-set-key (kbd "S-<f1>") (lambda ()
                                      (interactive)
                                      (remote-term "lth" "ssh" "lth")))
     (global-set-key (kbd "M-<f1>") (lambda ()
                                      (interactive)
                                      (remote-term "home" "ssh" "home")))
     (add-hook 'term-mode-hook (lambda()
                                 (setq yas-dont-activate t)))
   #+END_SRC

* Interface
** Misc
   #+BEGIN_SRC emacs-lisp
     (menu-bar-mode -1)
     (tool-bar-mode -1)
     (scroll-bar-mode -1)
     (setq inhibit-startup-screen 't)

     (setq auto-window-vscroll nil)

     (setq truncate-partial-width-windows nil)
     (mouse-wheel-mode t)
     (setq x-select-enable-clipboard t)
     (setq-default auto-revert-interval 1)
     (setq show-trailing-whitespace nil)
     (put 'narrow-to-region 'disabled nil)

     (setq-default indent-tabs-mode nil)

     (use-package tramp)

     (projectile-global-mode)

     (setq vc-follow-symlinks nil)

     (sml/setup)
     (sml/apply-theme 'respectful)

     ;; (setq auto-save-list-file-prefix (expand-file-name
     ;;                                   "tmp/auto-save-list/.saves-" emacs.d))
   #+END_SRC
** ido
   #+BEGIN_SRC emacs-lisp
     (use-package flx-ido
       :init
       (progn
         (ido-mode 1)
         (ido-everywhere 1)
         (flx-ido-mode 1)
         (setq ido-auto-merge-work-directories-length -1)
         ;; disable ido faces to see flx highlights.
         (setq ido-use-faces nil)))

     (use-package ido-vertical-mode
       :init
       (ido-vertical-mode 1))
   #+END_SRC
** Smex
   #+BEGIN_SRC emacs-lisp
     (use-package smex
       :init
       (smex-initialize)
       :bind
       (("M-x" . smex)
        ("S-M-x" . smex-major-mode-commands)))
   #+END_SRC

** Shortcut keys
   #+BEGIN_SRC emacs-lisp
     (use-package bind-key
       :init
       (progn
         (bind-key "C-c m" 'magit-status)

         (bind-key "C-?" 'help-command)
         (bind-key "M-?" 'mark-paragraph)
         (bind-key "C-h" 'delete-backward-char)
         (bind-key "M-h" 'backward-kill-word)

         (bind-key "C-x C-b" 'ibuffer)

         ;; (bind-key "M-q") '(lambda () (interactive (fill-paragraph 60)))

         (bind-key "M-S-<up>" 'enlarge-window)
         (bind-key "M-S-<down>" 'shrink-window)
         (bind-key "M-S-<right>" 'enlarge-window-horizontally)
         (bind-key "M-S-<left>" 'shrink-window-horizontally)

         (bind-key "C-c SPC w" 'whitespace-mode)
         (bind-key "C-c SPC c" 'whitespace-cleanup)

         (bind-key "C-c #" 'comment-region)

         (bind-key "<f7>" 'flyspell-buffer)
         (bind-key (kbd "<C-f7>") 'ispell-change-dictionary))) ;; Does not work on MBP
   #+END_SRC
*** Super/subscripts
    #+BEGIN_SRC emacs-lisp
      (use-package iso-transl
        :init
        (iso-transl-define-keys
         `(("^0" . ,(vector (decode-char 'ucs #x2070)))
           ("^4" . ,(vector (decode-char 'ucs #x2074))) ; 1-3 already defined
           ("^5" . ,(vector (decode-char 'ucs #x2075)))
           ("^6" . ,(vector (decode-char 'ucs #x2076)))
           ("^7" . ,(vector (decode-char 'ucs #x2077)))
           ("^8" . ,(vector (decode-char 'ucs #x2078)))
           ("^9" . ,(vector (decode-char 'ucs #x2079)))
           ("^+" . ,(vector (decode-char 'ucs #x207A)))
           ("^-" . ,(vector (decode-char 'ucs #x207B)))
           ("^=" . ,(vector (decode-char 'ucs #x207C)))
           ("^(" . ,(vector (decode-char 'ucs #x207D)))
           ("^)" . ,(vector (decode-char 'ucs #x207E)))
           ("_0" . ,(vector (decode-char 'ucs #x2080)))
           ("_1" . ,(vector (decode-char 'ucs #x2081)))
           ("_2" . ,(vector (decode-char 'ucs #x2082)))
           ("_3" . ,(vector (decode-char 'ucs #x2083)))
           ("_4" . ,(vector (decode-char 'ucs #x2084)))
           ("_5" . ,(vector (decode-char 'ucs #x2085)))
           ("_6" . ,(vector (decode-char 'ucs #x2086)))
           ("_7" . ,(vector (decode-char 'ucs #x2087)))
           ("_8" . ,(vector (decode-char 'ucs #x2088)))
           ("_9" . ,(vector (decode-char 'ucs #x2089)))
           ("_+" . ,(vector (decode-char 'ucs #x208A)))
           ("_-" . ,(vector (decode-char 'ucs #x208B)))
           ("_=" . ,(vector (decode-char 'ucs #x208C)))
           ("_(" . ,(vector (decode-char 'ucs #x208D)))
           ("_)" . ,(vector (decode-char 'ucs #x208E))))))
    #+END_SRC
** OS X-specific configuration
   #+BEGIN_SRC emacs-lisp
     (when (memq window-system '(mac ns))
       (progn
         (exec-path-from-shell-initialize)
         (setq mac-option-modifier nil
               mac-command-modifier 'meta
               x-select-enable-clipboard t
               ns-use-native-fullscreen nil)
         (menu-bar-mode 1)
         (setq ring-bell-function #'ignore)
         (setq-default org-babel-python-command "python3")
         (setenv "LC_CTYPE" "UTF-8")))
   #+END_SRC
** Linum mode
   #+BEGIN_SRC emacs-lisp
     (use-package linum
       :init
       (progn
         (defcustom linum-disabled-modes-list
           '(eshell-mode wl-summary-mode compilation-mode org-mode
                         image-mode dired-mode doc-view-mode)
           "* List of modes disabled when global linum mode is on"
           :type '(repeat (sexp :tag "Major mode"))
           :tag " Major modes where linum is disabled: "
           :group 'linum
           )
         (defcustom linum-disable-starred-buffers 't
           "* Disable buffers that have stars in them like *Gnu Emacs*"
           :type 'boolean
           :group 'linum)

         (defun linum-on ()
           "* When linum is running globally, disable line number in
     modes defined in `linum-disabled-modes-list'. Changed by
     linum-off. Also turns off numbering in starred modes like *scratch*"
           (unless (or (minibufferp) (member major-mode linum-disabled-modes-list)
                       (and linum-disable-starred-buffers (string-match "*" (buffer-name))))
             (linum-mode 1)))
         (setq linum-format "%3d ")
         (global-linum-mode)))
   #+END_SRC
** Theme
   #+BEGIN_SRC emacs-lisp
     (defvar emacs-theme)
     (setq emacs-theme 'zenburn)
     (load-theme emacs-theme t)
   #+END_SRC
*** Fonts
     #+BEGIN_SRC emacs-lisp
       ;;(set-face-attribute 'default nil :family "Anonymous Pro" :height 170)
       ;;(set-face-attribute 'default nil :family "DejaVu Sans Mono" :height 140)

       ;; (require 'unicode-fonts)
       ;; (unicode-fonts-setup)
       ;; (set-default-font "Consolas-12")
       ;; (set-fontset-font t 'greek "Consolas")
       ;; (set-fontset-font t 'cyrillic "Consolas")
       ;; (set-fontset-font t (cons #x2070 #x209F) "Consolas")
     #+END_SRC
*** Highlight current line
    #+BEGIN_SRC emacs-lisp
      (global-hl-line-mode 1)
      (defvar hl-dark-colour)
      (defvar hl-light-colour)
      (setq hl-dark-colour "#4F4F4F")
      (setq hl-light-colour "#CDD9FF")
      (set-face-background 'hl-line hl-dark-colour)
    #+END_SRC
*** Darkroom
    Function to quickly toggle between dark/light themes, useful in
    conjunction with f-lux' darkroom mode.
    #+BEGIN_SRC emacs-lisp
      (defvar in-darkroom)
      (setq in-darkroom nil)

      (defun toggle-darkroom ()
        "Enable f-lux' darkroom-friendly colours."
        (interactive)
        (if (not in-darkroom)
            (progn
              (disable-theme emacs-theme)
              (set-face-background 'hl-line hl-light-colour)
              (setq in-darkroom 't))
          (progn
            (enable-theme emacs-theme)
            (set-face-background 'hl-line hl-dark-colour)
            (setq in-darkroom nil))))
      (bind-key "C-c d" 'toggle-darkroom)
    #+END_SRC
** Multiple cursors
   #+BEGIN_SRC emacs-lisp
     (use-package multiple-cursors
       :bind (("C-S-c C-S-c" . mc/edit-lines)
              ("C->" . mc/mark-next-like-this)
              ("C-<" . mc/mark-previous-like-this)
              ("C-c C-<" . mc/mark-all-like-this)))
   #+END_SRC

* Org
** Org configuration
   #+BEGIN_SRC emacs-lisp
     (setq org-hide-leading-stars 't)
     (setq org-src-fontify-natively 't)
     (add-hook 'org-mode-hook (lambda () (variable-pitch-mode t)))
     (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
     (set-face-attribute 'org-block nil :inherit 'fixed-pitch)

     (use-package org-mouse)
   #+END_SRC
** Org functions
   Borrowed from [[http://wenshanren.org/?p=334][Ren Wenshan]].
   #+BEGIN_SRC emacs-lisp
     (defun org-insert-src-block (src-code-type)
       "Insert a `SRC-CODE-TYPE' type source code block in org-mode."
       (interactive
        (let ((src-code-types
               '("emacs-lisp" "python" "C" "sh" "java" "js" "clojure" "C++" "css"
                 "calc" "asymptote" "dot" "gnuplot" "ledger" "lilypond" "mscgen"
                 "octave" "oz" "plantuml" "R" "sass" "screen" "sql" "awk" "ditaa"
                 "haskell" "latex" "lisp" "matlab" "ocaml" "org" "perl" "ruby"
                 "scheme" "sqlite")))
          (list (ido-completing-read "Source code type: " src-code-types))))
       (progn
         (newline-and-indent)
         (insert (format "#+BEGIN_SRC %s\n" src-code-type))
         (newline-and-indent)
         (insert "#+END_SRC\n")
         (previous-line 2)
         (org-edit-src-code)))
     (bind-key "C-c s" 'org-insert-src-block org-mode-map)
   #+END_SRC
* Modes
** Cmake
   #+BEGIN_SRC emacs-lisp
     (use-package cmake-mode
       :mode (("CMakeLists\\.txt\\'" . cmake-mode)
              ("\\.cmake\\'" . cmake-mode))
       :init
       (progn
         (defun cmake-rename-buffer ()
           "Renames a CMakeLists.txt buffer to cmake-<directory name>."
           (interactive)
           (when (and (buffer-file-name) (string-match "CMakeLists.txt" (buffer-name)))
             (let ((new-buffer-name (concat "cmake-"
                                            (file-name-nondirectory
                                             (directory-file-name
                                              (file-name-directory (buffer-file-name)))))))
               (rename-buffer new-buffer-name t))))

         (add-hook 'cmake-mode-hook (function cmake-rename-buffer))

         (add-hook 'cmake-mode-hook
                   '(lambda()
                      (local-set-key (kbd "C-c q") 'cmake-quick-document)
                      (defun cmake-quick-document()
                        (interactive)
                        (beginning-of-line)
                        (insert (concat "project(" (read-string "Project name: ") ")\n"))
                        (insert (concat "cmake_minimum_required(VERSION " (read-string "CMake version: " "2.8") ")\n\n"))
                        (when (yes-or-no-p "C++ warnings and optimization flags? ")
                          (insert "set(CMAKE_CXX_FLAGS \"--std=c++11 -Wall -Wextra\")\n")
                          (insert "if(\"${CMAKE_BUILD_TYPE}\" STREQUAL \"Release\")\n")
                          (insert "  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -O3\")\n")
                          (insert "else()\n")
                          (insert "  set(CMAKE_BUILD_TYPE \"Debug\")\n")
                          (insert "  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -O0 -g\")\n")
                          (insert "  add_definitions(\"-DDEBUG\")\n")
                          (insert "endif()\n\n")))))))
   #+END_SRC
** LaTeX
   #+BEGIN_SRC emacs-lisp
     (use-package tex-site)
   #+END_SRC
** Ediff
   #+BEGIN_SRC emacs-lisp
     (setq-default ediff-split-window-function 'split-window-horizontally)
     (setq-default ediff-window-setup-function 'ediff-setup-windows-plain)
   #+END_SRC

* Programming
** Auto complete
   #+BEGIN_SRC emacs-lisp
     (use-package auto-complete
       :init
       (add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict"))
     (use-package auto-complete-config
       :init
       (ac-config-default))
     (use-package auto-complete-clang)
   #+END_SRC

** Flycheck
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :init
       (progn
         (add-hook 'after-init-hook #'global-flycheck-mode)
         (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc))))
   #+END_SRC

** C/C++
   #+BEGIN_SRC emacs-lisp
     (add-hook 'c-mode-common-hook
               (lambda ()
                 (bind-key "C-c c" 'compile)))
     (use-package realgud)
   #+END_SRC

*** Cmake
    #+BEGIN_SRC emacs-lisp
      (use-package cpputils-cmake
        :init
        (progn
          (add-hook 'c-mode-common-hook
                    (lambda ()
                      (if (derived-mode-p 'c-mode 'c++-mode)
                          (cppcm-reload-all))))
          (setq cppcm-write-flymake-makefile nil)
          (global-set-key (kbd "C-c g")
                          '(lambda ()
                             (interactive)
                             (gud-gdb
                              (concat "gdb --fullname "
                                      (cppcm-get-exe-path-current-buffer)))))))
    #+END_SRC

*** Header guards
    #+BEGIN_SRC emacs-lisp
      (defun traverse-project (dir file)
        "Return the path of the current file relative to the project root."
        (let ((stop-dirs
               (list (expand-file-name "~") ; Stop at $HOME
                     "/tmp"
                     "/"
                     (expand-file-name (concat dir "/../src")) ; Stop if current directory is named src
                     (expand-file-name (concat dir "/../libs")) ; or libs
                     (expand-file-name (concat dir "/../include")))) ; or include
              (ndir (directory-file-name (expand-file-name dir))))
          (let ((relname (file-relative-name file ndir)))
            (if (cl-find ndir stop-dirs :test #'equal)
                relname
              (if (file-accessible-directory-p (expand-file-name (concat ndir "/.git"))) ; If there is a .git directory, stop
                  relname
                (traverse-project (concat ndir "/..") file))))))

      (defun get-header-guard ()
        "Return the header guard symbol to be used for the current file."
        (let* ((file (buffer-file-name))
               (path (traverse-project (file-name-directory file) file)))
          (upcase (cl-substitute
                   ?_ ?. (cl-substitute
                          ?_ ?/ (if (string= (substring path 0 1) "/")
                                    (substring path 1)
                                  path))))))

      (defun insert-header-guard ()
        (interactive)
        (let ((l (length (buffer-name))))
          (when (or (equal (substring (buffer-name) (- l 2)  l) ".h")
                    (equal (substring (buffer-name) (- l 4)  l) ".cuh"))
            (when (not (file-exists-p (buffer-file-name)))
              (let ((header-guard (get-header-guard)))
                (insert (concat "//  @ Project : " (projectile-project-name)))
                (newline)
                (insert (concat "//  @ File Name : " (buffer-name)))
                (newline)
                (insert (concat "//  @ Date : " (format-time-string "%Y-%m-%d")))
                (newline)
                (insert (concat "//  @ Author : Stefanos Carlstr√∂m"))
                (newline)
                (insert "//")
                (newline)
                (insert "//")
                (newline)
                (insert (concat "#ifndef " header-guard))
                (newline)
                (newline)
                (insert (concat "#define " header-guard))
                (newline)(newline)
                (newline)(newline)
                (insert (concat "#endif //" header-guard))
                (previous-line)
                (previous-line))))))

      (add-hook 'c-mode-common-hook 'insert-header-guard)
    #+END_SRC

** Lisps
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.al\\'" . lisp-mode))
   #+END_SRC
*** Clojure
    #+BEGIN_SRC emacs-lisp
      (use-package clojure-mode)
      (use-package cider
        :init
        (add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode))
    #+END_SRC

*** Hy
    #+BEGIN_SRC emacs-lisp
      (use-package hy-mode
        :init
        (add-hook 'hy-mode-hook
                  (lambda () (bind-key "C-c M-j" 'inferior-lisp))))
    #+END_SRC

** Hex colors
   Borrowed from [[http://www.emacswiki.org/emacs/HexColour][Emacs wiki]].
   #+BEGIN_SRC emacs-lisp
     (defun hexcolour-luminance (color)
         "Calculate the luminance of a color string (e.g. \"#ffaa00\", \"blue\").
       This is 0.3 red + 0.59 green + 0.11 blue and always between 0 and 255."
         (let* ((values (x-color-values color))
                (r (car values))
                (g (cadr values))
                (b (caddr values)))
           (floor (+ (* .3 r) (* .59 g) (* .11 b)) 256)))
       (defun hexcolour-add-to-font-lock ()
         (interactive)
         (font-lock-add-keywords nil
          `((,(concat "#[0-9a-fA-F]\\{3\\}[0-9a-fA-F]\\{3\\}?\\|"
                      (regexp-opt (x-defined-colors) 'words))
             (0 (let ((colour (match-string-no-properties 0)))
                  (put-text-property
                   (match-beginning 0) (match-end 0)
                   'face `((:foreground ,(if (> 128.0 (hexcolour-luminance colour))
                                              "white" "black"))
                           (:background ,colour)))))))))

     (add-hook 'css-mode-hook 'hexcolour-add-to-font-lock)
     (add-hook 'org-mode-hook 'hexcolour-add-to-font-lock)
     (add-hook 'emacs-lisp-mode-hook 'hexcolour-add-to-font-lock)
   #+END_SRC

* Helm
  #+BEGIN_SRC emacs-lisp
    (use-package helm-config
      :bind ("C-c h" . helm-mini))
    (use-package helm-ag
      :bind ("C-c a" . helm-do-ag))
  #+END_SRC
* BibTeX
  #+BEGIN_SRC emacs-lisp
    (setq bibtex-autokey-name-case-convert-function 'capitalize
          bibtex-autokey-year-length 4
          bibtex-autokey-year-title-separator ""
          bibtex-autokey-titleword-length 0
          bibtex-autokey-titleword-separator "")

  #+END_SRC

** Ebib
   #+BEGIN_SRC emacs-lisp
     (use-package ebib
       :bind ("C-c e" . ebib)
       :init (progn
               (setq ebib-preload-bib-files '("~/Dropbox/References/references.bib"))
               (org-add-link-type "ebib" 'ebib-open-org-link)))
   #+END_SRC
** Helm Bibtex
  #+BEGIN_SRC emacs-lisp
    ;;(use-package ebib)
    (use-package helm-bibtex)
    (setq helm-bibtex-bibliography "~/Dropbox/References/references.bib")
    (setq helm-bibtex-library-path "~/Dropbox/References/")
    (setq helm-bibtex-pdf-symbol "P")
    (setq helm-bibtex-pdf-open-function
          (lambda (fpath) (shell-command-to-string
                           (concat "open " fpath " &"))))
  #+END_SRC
